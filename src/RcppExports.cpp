// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// calcPWDh
NumericMatrix calcPWDh(NumericMatrix x);
RcppExport SEXP redist_calcPWDh(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP );
        NumericMatrix __result = calcPWDh(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// segregationcalc
NumericVector segregationcalc(NumericMatrix distmat, NumericVector grouppop, NumericVector fullpop);
RcppExport SEXP redist_segregationcalc(SEXP distmatSEXP, SEXP grouppopSEXP, SEXP fullpopSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type distmat(distmatSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type grouppop(grouppopSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type fullpop(fullpopSEXP );
        NumericVector __result = segregationcalc(distmat, grouppop, fullpop);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rsg
List rsg(List adj_list, NumericVector population, int Ndistrict, double target_pop, double thresh, int maxiter);
RcppExport SEXP redist_rsg(SEXP adj_listSEXP, SEXP populationSEXP, SEXP NdistrictSEXP, SEXP target_popSEXP, SEXP threshSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type adj_list(adj_listSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type population(populationSEXP );
        Rcpp::traits::input_parameter< int >::type Ndistrict(NdistrictSEXP );
        Rcpp::traits::input_parameter< double >::type target_pop(target_popSEXP );
        Rcpp::traits::input_parameter< double >::type thresh(threshSEXP );
        Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP );
        List __result = rsg(adj_list, population, Ndistrict, target_pop, thresh, maxiter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// swMH
List swMH(List aList, NumericVector cdvec, NumericVector cdorigvec, NumericVector popvec, NumericVector grouppopvec, int nsims, double eprob, double pct_dist_parity, NumericVector beta_sequence, NumericVector beta_weights, NumericMatrix ssdmat, int lambda = 0, double beta_population = 0.0, double beta_compact = 0.0, double beta_segregation = 0.0, double beta_similar = 0.0, int anneal_beta_population = 0, int anneal_beta_compact = 0, int anneal_beta_segregation = 0, int anneal_beta_similar = 0, int adjswap = 1);
RcppExport SEXP redist_swMH(SEXP aListSEXP, SEXP cdvecSEXP, SEXP cdorigvecSEXP, SEXP popvecSEXP, SEXP grouppopvecSEXP, SEXP nsimsSEXP, SEXP eprobSEXP, SEXP pct_dist_paritySEXP, SEXP beta_sequenceSEXP, SEXP beta_weightsSEXP, SEXP ssdmatSEXP, SEXP lambdaSEXP, SEXP beta_populationSEXP, SEXP beta_compactSEXP, SEXP beta_segregationSEXP, SEXP beta_similarSEXP, SEXP anneal_beta_populationSEXP, SEXP anneal_beta_compactSEXP, SEXP anneal_beta_segregationSEXP, SEXP anneal_beta_similarSEXP, SEXP adjswapSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type aList(aListSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type cdvec(cdvecSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type cdorigvec(cdorigvecSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type popvec(popvecSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type grouppopvec(grouppopvecSEXP );
        Rcpp::traits::input_parameter< int >::type nsims(nsimsSEXP );
        Rcpp::traits::input_parameter< double >::type eprob(eprobSEXP );
        Rcpp::traits::input_parameter< double >::type pct_dist_parity(pct_dist_paritySEXP );
        Rcpp::traits::input_parameter< NumericVector >::type beta_sequence(beta_sequenceSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type beta_weights(beta_weightsSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type ssdmat(ssdmatSEXP );
        Rcpp::traits::input_parameter< int >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type beta_population(beta_populationSEXP );
        Rcpp::traits::input_parameter< double >::type beta_compact(beta_compactSEXP );
        Rcpp::traits::input_parameter< double >::type beta_segregation(beta_segregationSEXP );
        Rcpp::traits::input_parameter< double >::type beta_similar(beta_similarSEXP );
        Rcpp::traits::input_parameter< int >::type anneal_beta_population(anneal_beta_populationSEXP );
        Rcpp::traits::input_parameter< int >::type anneal_beta_compact(anneal_beta_compactSEXP );
        Rcpp::traits::input_parameter< int >::type anneal_beta_segregation(anneal_beta_segregationSEXP );
        Rcpp::traits::input_parameter< int >::type anneal_beta_similar(anneal_beta_similarSEXP );
        Rcpp::traits::input_parameter< int >::type adjswap(adjswapSEXP );
        List __result = swMH(aList, cdvec, cdorigvec, popvec, grouppopvec, nsims, eprob, pct_dist_parity, beta_sequence, beta_weights, ssdmat, lambda, beta_population, beta_compact, beta_segregation, beta_similar, anneal_beta_population, anneal_beta_compact, anneal_beta_segregation, anneal_beta_similar, adjswap);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
