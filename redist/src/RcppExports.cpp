// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP redist_rcpp_hello_world() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = rcpp_hello_world();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// pBias
Rcpp::NumericVector pBias(Rcpp::NumericVector ndem, Rcpp::NumericVector nrep, Rcpp::NumericMatrix cdMat, double swing);
RcppExport SEXP redist_pBias(SEXP ndemSEXP, SEXP nrepSEXP, SEXP cdMatSEXP, SEXP swingSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ndem(ndemSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type nrep(nrepSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type cdMat(cdMatSEXP );
        Rcpp::traits::input_parameter< double >::type swing(swingSEXP );
        Rcpp::NumericVector __result = pBias(ndem, nrep, cdMat, swing);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// checkRecip
int checkRecip(Rcpp::List aList);
RcppExport SEXP redist_checkRecip(SEXP aListSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::List >::type aList(aListSEXP );
        int __result = checkRecip(aList);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// addTies
Rcpp::List addTies(Rcpp::List aList);
RcppExport SEXP redist_addTies(SEXP aListSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::List >::type aList(aListSEXP );
        Rcpp::List __result = addTies(aList);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// genCC
Rcpp::List genCC(Rcpp::List aList, Rcpp::List cutList);
RcppExport SEXP redist_genCC(SEXP aListSEXP, SEXP cutListSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::List >::type aList(aListSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type cutList(cutListSEXP );
        Rcpp::List __result = genCC(aList, cutList);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// genCC2
Rcpp::List genCC2(Rcpp::List aList, Rcpp::NumericVector cds, int zeroInd = 1);
RcppExport SEXP redist_genCC2(SEXP aListSEXP, SEXP cdsSEXP, SEXP zeroIndSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::List >::type aList(aListSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cds(cdsSEXP );
        Rcpp::traits::input_parameter< int >::type zeroInd(zeroIndSEXP );
        Rcpp::List __result = genCC2(aList, cds, zeroInd);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// bSearchCppBound
Rcpp::List bSearchCppBound(Rcpp::List adjList, Rcpp::NumericVector tractnum, Rcpp::NumericVector boundaryindex);
RcppExport SEXP redist_bSearchCppBound(SEXP adjListSEXP, SEXP tractnumSEXP, SEXP boundaryindexSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::List >::type adjList(adjListSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tractnum(tractnumSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type boundaryindex(boundaryindexSEXP );
        Rcpp::List __result = bSearchCppBound(adjList, tractnum, boundaryindex);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// getBoundary
Rcpp::NumericVector getBoundary(Rcpp::List list);
RcppExport SEXP redist_getBoundary(SEXP listSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::List >::type list(listSEXP );
        Rcpp::NumericVector __result = getBoundary(list);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// getBoundary2
Rcpp::NumericVector getBoundary2(Rcpp::List fullList, Rcpp::List conList);
RcppExport SEXP redist_getBoundary2(SEXP fullListSEXP, SEXP conListSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::List >::type fullList(fullListSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type conList(conListSEXP );
        Rcpp::NumericVector __result = getBoundary2(fullList, conList);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// getCds
Rcpp::NumericVector getCds(Rcpp::List fullList, Rcpp::NumericVector boundInds, Rcpp::NumericVector cds);
RcppExport SEXP redist_getCds(SEXP fullListSEXP, SEXP boundIndsSEXP, SEXP cdsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::List >::type fullList(fullListSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type boundInds(boundIndsSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cds(cdsSEXP );
        Rcpp::NumericVector __result = getCds(fullList, boundInds, cds);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// genCutC
Rcpp::List genCutC(Rcpp::List aList, Rcpp::NumericVector cds);
RcppExport SEXP redist_genCutC(SEXP aListSEXP, SEXP cdsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::List >::type aList(aListSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cds(cdsSEXP );
        Rcpp::List __result = genCutC(aList, cds);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// getAdj
Rcpp::NumericVector getAdj(Rcpp::List aList, Rcpp::NumericVector unitVec, Rcpp::NumericVector cdVec, int cd);
RcppExport SEXP redist_getAdj(SEXP aListSEXP, SEXP unitVecSEXP, SEXP cdVecSEXP, SEXP cdSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::List >::type aList(aListSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type unitVec(unitVecSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cdVec(cdVecSEXP );
        Rcpp::traits::input_parameter< int >::type cd(cdSEXP );
        Rcpp::NumericVector __result = getAdj(aList, unitVec, cdVec, cd);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// popCalc
Rcpp::NumericVector popCalc(Rcpp::NumericVector switchPartition, Rcpp::NumericVector pops, Rcpp::NumericVector distPops, int oldCd, int newCd);
RcppExport SEXP redist_popCalc(SEXP switchPartitionSEXP, SEXP popsSEXP, SEXP distPopsSEXP, SEXP oldCdSEXP, SEXP newCdSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type switchPartition(switchPartitionSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pops(popsSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type distPops(distPopsSEXP );
        Rcpp::traits::input_parameter< int >::type oldCd(oldCdSEXP );
        Rcpp::traits::input_parameter< int >::type newCd(newCdSEXP );
        Rcpp::NumericVector __result = popCalc(switchPartition, pops, distPops, oldCd, newCd);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// swMH
Rcpp::List swMH(Rcpp::List aList, Rcpp::NumericVector cds, int nrep, double eprob, Rcpp::NumericVector pops, Rcpp::NumericVector grouppop, int parity, int margin, int dists, int lambda, Rcpp::NumericMatrix ssd, double beta, double betadiss, double betapop, Rcpp::NumericVector betavec, Rcpp::NumericVector betadissvec, Rcpp::NumericVector betapopvec, int origpartcompact = 0, int annealbeta = 0, int annealbetadiss = 0, int annealbetapop = 0, int elimCheck = 1);
RcppExport SEXP redist_swMH(SEXP aListSEXP, SEXP cdsSEXP, SEXP nrepSEXP, SEXP eprobSEXP, SEXP popsSEXP, SEXP grouppopSEXP, SEXP paritySEXP, SEXP marginSEXP, SEXP distsSEXP, SEXP lambdaSEXP, SEXP ssdSEXP, SEXP betaSEXP, SEXP betadissSEXP, SEXP betapopSEXP, SEXP betavecSEXP, SEXP betadissvecSEXP, SEXP betapopvecSEXP, SEXP origpartcompactSEXP, SEXP annealbetaSEXP, SEXP annealbetadissSEXP, SEXP annealbetapopSEXP, SEXP elimCheckSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::List >::type aList(aListSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cds(cdsSEXP );
        Rcpp::traits::input_parameter< int >::type nrep(nrepSEXP );
        Rcpp::traits::input_parameter< double >::type eprob(eprobSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pops(popsSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type grouppop(grouppopSEXP );
        Rcpp::traits::input_parameter< int >::type parity(paritySEXP );
        Rcpp::traits::input_parameter< int >::type margin(marginSEXP );
        Rcpp::traits::input_parameter< int >::type dists(distsSEXP );
        Rcpp::traits::input_parameter< int >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ssd(ssdSEXP );
        Rcpp::traits::input_parameter< double >::type beta(betaSEXP );
        Rcpp::traits::input_parameter< double >::type betadiss(betadissSEXP );
        Rcpp::traits::input_parameter< double >::type betapop(betapopSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type betavec(betavecSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type betadissvec(betadissvecSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type betapopvec(betapopvecSEXP );
        Rcpp::traits::input_parameter< int >::type origpartcompact(origpartcompactSEXP );
        Rcpp::traits::input_parameter< int >::type annealbeta(annealbetaSEXP );
        Rcpp::traits::input_parameter< int >::type annealbetadiss(annealbetadissSEXP );
        Rcpp::traits::input_parameter< int >::type annealbetapop(annealbetapopSEXP );
        Rcpp::traits::input_parameter< int >::type elimCheck(elimCheckSEXP );
        Rcpp::List __result = swMH(aList, cds, nrep, eprob, pops, grouppop, parity, margin, dists, lambda, ssd, beta, betadiss, betapop, betavec, betadissvec, betapopvec, origpartcompact, annealbeta, annealbetadiss, annealbetapop, elimCheck);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
